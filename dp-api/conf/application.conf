accumulo.instance = ${?ACCUMULO_INSTANCE}
accumulo.password = ${?ACCUMULO_PASSWORD}
accumulo.user = ${?ACCUMULO_USER}
accumulo.zookeepers = ${?ZOOKEEPERS}
analytics.siteId = ${?ANALYTICS_API_SITE_ID} # if running locally, use 2
cluster.name = ${?CLUSTER_NAME}
docPreview.host = ${DOC_PREVIEW_HOST}
auth.method = ${?AUTH_METHOD} 
auth.state = ${?OAUTH_STATE} 
auth.requireLoginAttributeForAccess = ${PLAY_REQUIRE_LOGIN_ATTRIBUTE_FOR_ACCESS}
aws.S3_UPLOAD_BUCKET = ${?S3_BUCKET}
jobsApi.url = ${?JOBS_API_PATH}
rulesOfUse.baseApi = ${?RULES_OF_USE_API_HTTP_PATH}
rulesOfUse.apiKey = ${?RULES_OF_USE_API_KEY}
tableMapperApi.url = ${?TABLE_MAPPER_API_PATH}

oAuthClientId = ${?OAUTH_CLIENT_ID}
oAuthClientSecret = ${?OAUTH_CLIENT_SECRET}
oAuthAuthorizationEndpoint = ${?OAUTH_AUTHORIZATION_ENDPOINT}
oAuthTokenEndpoint = ${?OAUTH_TOKEN_ENDPOINT}
oAuthUserInfoEndpoint = ${?OAUTH_USERINFO_ENDPOINT}
oAuthScope = ${?OAUTH_SCOPE}

postgres.url = ${?POSTGRES_URL}
postgres.password = ${?POSTGRES_PASSWORD}
postgres.username = ${?POSTGRES_USERNAME}
rulesOfUseApi.url = ${?RULES_OF_USE_API_HTTP_PATH}
rulesOfUseApi.key = ${?RULES_OF_USE_API_KEY}
dataprofiler.environment_identifier = ${?CLUSTER_NAME}
thisPlayFramework.url = ${USER_FACING_API_HTTP_PATH}

play.allowHttpContext = false
play.logger.includeConfigProperties = true

# begin swagger config
play.filters.headers.frameOptions = null
play.filters.headers.xssProtection = null
play.filters.headers.contentTypeOptions = null
play.filters.headers.permittedCrossDomainPolicies = null
play.filters.csp.CSPFilter = "unsafe-inline"
# end swagger

# This will make all of the class level annotations run first and then the ones
# on each method. That way you can make an entire controller require authentication
# but then filter for specific capabilities per-method.
play.http.actionComposition.controllerAnnotationsFirst = true

# Uncomment this to see the config that will be applied to the system
# akka.log-config-on-start = on

akka.http.parsing.uri-parsing-mode = "relaxed"

# we are using play 2.7, akka.actor.default-dispatcher config is no longer valid
# https://doc.akka.io/docs/akka/2.6/project/migration-guide-2.5.x-2.6.x.html#internal-dispatcher-introduced
# https://doc.akka.io/docs/akka/2.6/project/migration-guide-2.5.x-2.6.x.html#default-dispatcher-size
akka.actor.default-dispatcher {
  executor = "thread-pool-executor"
  throughput = 1
  thread-pool-executor {
    fixed-pool-size = 64
  }
}

play.filters.csrf.header.bypassHeaders {
  Csrf-Token = "nocheck"
}

# As of 2.7.2, the temporary file reaper doesn't work, so it's just implemented in docker-compose. Look in docker/tmpfilereaper
# play.temporaryFile.reaper.enabled = true
# play.temporaryFile.reaper.initialDelay = "1 minute"
# play.temporaryFile.reaper.interval = "1 minute"
# play.temporaryFile.reaper.olderThan = "1 minute"

# Fun fact - the play http settings dont work in development mode (sbt run)
# https://www.playframework.com/documentation/2.7.x/ConfigFile#HTTP-server-settings-in-application.conf
play.server.http.idleTimeout = "infinite"
play.server.akka.requestTimeout = "infinite"
akka.http.server.idle-timeout = "infinite"
akka.http.server.request-timeout = "infinite"
akka.http.client.idle-timeout = "infinite"
akka.http.client.request-timeout = "infinite"

play.filters.cors {
  exposedHeaders = [
    "Content-Type",
    "Content-Encoding",
    "Location",
    "X-API-Token",
    "X-Assigned-Attributes",
    "X-Attributes-To-Reject",
    "X-Special-Attributes-To-Apply",
    "X-Authenticated-Via",
    "X-Authorization-Token",
    "X-Current-Attributes",
    "X-Refresh-Token",
    "X-Results-Truncated",
    "X-Username"
   ]
}

play.http.errorHandler = "handlers.DataProfilerJsonErrorHandler"

# https://www.playframework.com/documentation/2.8.x/JavaCache#Accessing-different-caches
play.cache.bindCaches = ["colpicker-cache"]
